# Overview
The "Online Course Generator" is a new feature for Unstack designed to automate the creation of online course materials. It solves the problem of the high time and effort investment required to produce course content by allowing users (educators, coaches, content creators) to generate complete modules from a single prompt. For each module, it produces a blog article, a featured image, and a comprehensive lesson plan, which includes a presentation script and text-to-speech audio.

# Core Features
- **Online Course Genre:** A new project type in the Unstack application specifically for creating online courses.
- **Blog Article Generation:** For each course module, the system uses the Gemini API to generate a full-length, well-structured blog article (800+ words) based on the module's title and description.
- **Featured Image Generation:** The system uses the Gemini Imagen API to create a relevant, high-quality featured image (16:9 aspect ratio) for each blog article.
- **Lesson Plan Generation:** The system generates a detailed lesson plan in a structured JSON format. This plan includes a title and a series of slides, each with a title, bulleted content, and a full presentation script.
- **Text-to-Speech Audio:** The feature uses the browser's Web Speech and MediaRecorder APIs to generate and capture audio for each slide's script, allowing users to create an audio version of their presentation.

# User Experience
- **User Personas:**
  - **Educators/Tutors:** Need to quickly create engaging lesson materials for online classes.
  - **Coaches/Consultants:** Want to package their expertise into a course format to sell or distribute.
  - **Content Creators:** Aim to repurpose their existing content into a new, monetizable format like an online course.
- **Key User Flows:**
  1. User selects "Online Course Generator" from the genre list when creating a new project.
  2. User provides a prompt and generates a course outline, which consists of several modules (chapters).
  3. User selects a module to open the `OnlineCourseChapterView`.
  4. Within this view, the user clicks buttons to generate the blog article, featured image, and lesson plan.
  5. Once the lesson plan is generated, the user can click another button to generate the TTS audio for each slide.
  6. The user can review all generated assets within the view, including reading the article, viewing the image, and playing the audio for each slide.
- **UI/UX Considerations:**
  - All generation processes are asynchronous with clear loading indicators to prevent UI blocking.
  - The new functionality is integrated into the existing, familiar Unstack interface.
  - The `OnlineCourseChapterView` provides a centralized dashboard for all assets related to a single course module.

# Technical Architecture
- **System Components:**
  - `BookPrompt.tsx`: Modified to include the new genre in the UI.
  - `App.tsx`: Modified to conditionally render the new `OnlineCourseChapterView` based on the project's genre.
  - `OnlineCourseChapterView.tsx`: A new component to display and manage the generation of articles, images, lesson plans, and audio.
  - `geminiService.ts`: Extended with `generateBlogArticle` and `generateLessonPlan` functions. The `generateBookOutline` function is updated to handle the course creation prompt.
  - `coverService.ts`: Extended with the `generateFeaturedImage` function.
  - `ttsService.ts`: The `generateSpeech` function is updated to use `MediaRecorder` for audio capture, and a new `generateLessonPlanAudio` function is added.
- **Data Models:**
  - No immediate database schema changes are required. The generated content (article text, lesson plan JSON) is currently managed in the component's state. Future iterations may store this in the `sub_chapters` table with a new `type` column.
- **APIs and Integrations:**
  - Google Gemini API: For text generation (`gemini-1.5-flash-latest`).
  - Google Imagen API: For image generation (`imagen-4.0-generate-preview-06-06`).
  - Web Speech API & MediaRecorder API: For client-side text-to-speech audio generation and capture.
  - (Future) Google Slides API: For presentation export.

# Development Roadmap
- **MVP (Phases 1 & 2 - Complete):**
  - Foundational UI for selecting the "Online Course Generator" genre.
  - Core logic for generating the text for the blog article and the JSON for the lesson plan.
  - A dedicated view (`OnlineCourseChapterView`) to display the generated text content.
  - Integration of Gemini Imagen to generate and display the featured image.
  - Integration of the Web Speech API to generate and play back TTS audio for the lesson plan.
- **Future Enhancements (Phase 3):**
  - Implement Google OAuth 2.0 for secure authentication with the Google Slides API.
  - Develop the functionality to create a new Google Slides presentation and populate it with the title and content from the generated lesson plan.
  - Allow users to select from a list of available TTS voices.
  - Provide editing capabilities for the generated article and lesson plan scripts directly within the UI.

# Logical Dependency Chain
1. **UI Foundation:** Add the "Online Course Generator" option to `BookPrompt.tsx`. This is the entry point for the entire feature.
2. **Core Logic:** Implement the new generation functions in `geminiService.ts`. This is the core of the feature's value.
3. **Frontend View:** Create `OnlineCourseChapterView.tsx` to have a place to display the results of the core logic. This makes the feature immediately testable and usable.
4. **Routing:** Update `App.tsx` to ensure users are directed to the new view when working with a course.
5. **Add Visuals & Audio:** Sequentially integrate image generation (`coverService.ts`) and then audio generation (`ttsService.ts`) into the view. These are enhancements that build upon the core text content.
6. **External API (Future):** The Google Slides integration is the final, most complex step. It depends on the lesson plan data being successfully generated and is the logical next step after all internal functionality is complete.

# Risks and Mitigations
- **Technical Challenges:**
  - *Risk:* The Google Slides API integration requires a complex OAuth 2.0 flow.
  - *Mitigation:* This will be tackled in a separate phase. Development will rely heavily on Google's official documentation and will be broken down into smaller tasks: 1) Auth flow, 2) Basic presentation creation, 3) Populating slides with content.
  - *Risk:* Browser support for `MediaRecorder` and `speechSynthesis` can be inconsistent.
  - *Mitigation:* The application will check for the existence of these APIs upon use and show a clear, user-friendly error message if they are not supported.
- **Figuring out the MVP:**
  - *Risk:* The feature scope could expand unnecessarily (e.g., adding video generation).
  - *Mitigation:* The current three-phase roadmap provides a clear and limited scope for the MVP (Phases 1 & 2), focusing on delivering core value first. All major additions will require a new planning phase.
- **Resource Constraints:**
  - *Risk:* Users may be confused about the need for multiple API keys (Gemini, Google Cloud).
  - *Mitigation:* The application will provide clear, in-context instructions on where to find and how to configure the necessary keys. The `README.md` will also be updated with this information.

# Appendix
- **Research Findings:** The demand for automated course creation tools is high, particularly among solo entrepreneurs and small educational teams who lack the resources for large-scale content production.
- **Technical Specifications:**
  - Featured Image: 16:9 aspect ratio, JPEG format.
  - Lesson Plan Audio: WebM format with Opus codec, generated client-side.
  - Lesson Plan Structure: JSON object with a `title` and an array of `slides`, where each slide has a `title`, `content`, and `script`.
