#!/usr/bin/env node

// Simple WordPress test publisher
import fetch from 'node-fetch';

const credentials = {
  url: 'https://streamstack.info',
  username: 'Stackmin',
  appPassword: 'bMtO Zv3B V8o4 B1Pi 3UeL NBwS'
};

async function publishTestArticle() {
  console.log('üöÄ Testing WordPress article publishing...');
  
  const auth = Buffer.from(`${credentials.username}:${credentials.appPassword}`).toString('base64');
  
  // Create a test article
  const testArticle = {
    title: 'BookGen Auto-Publishing Test: Dropshipping Success Strategies for 2025',
    content: `
    <h2>Introduction</h2>
    <p>This is a test article generated by BookGen's automated publishing system. This demonstrates the end-to-end workflow from content generation to WordPress publishing.</p>
    
    <h2>Key Takeaways</h2>
    <ul>
    <li>Automated content generation works seamlessly</li>
    <li>WordPress integration via application passwords is functional</li>
    <li>Publishing workflow is complete and validated</li>
    </ul>
    
    <h2>Conclusion</h2>
    <p>This test confirms that the BookGen auto-publishing workflow successfully connects to WordPress and can create new content automatically.</p>
    
    <p><em>Generated by BookGen Auto-Publishing System - Test Validation</em></p>
    `,
    status: 'publish',
    categories: [695], // E-commerce category ID
    author: 1,
    excerpt: 'Test article demonstrating BookGen auto-publishing functionality and WordPress integration.'
  };
  
  try {
    const response = await fetch(`${credentials.url}/wp-json/wp/v2/posts`, {
      method: 'POST',
      headers: {
        'Authorization': `Basic ${auth}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testArticle)
    });
    
    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ Article published successfully!');
      console.log(`üìù Title: ${result.title.rendered}`);
      console.log(`üîó URL: ${result.link}`);
      console.log(`üìä ID: ${result.id}`);
      console.log(`üìÖ Date: ${result.date}`);
      return result;
    } else {
      const error = await response.text();
      console.log(`‚ùå Publishing failed: ${response.status}`);
      console.log(`Error: ${error}`);
      return null;
    }
  } catch (error) {
    console.log(`‚ùå Connection failed: ${error.message}`);
    return null;
  }
}

// Run the test
publishTestArticle().then(result => {
  if (result) {
    console.log('\nüéâ SUCCESS: Auto-publishing workflow validated!');
    console.log(`Visit the published article: ${result.link}`);
  } else {
    console.log('\n‚ùå FAILED: Publishing workflow needs troubleshooting');
  }
}).catch(console.error);