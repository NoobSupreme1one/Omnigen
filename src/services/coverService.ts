import { Book } from '../types';
import { GoogleGenAI } from '@google/genai';

export const generateBookCover = async (book: Book, geminiApiKey: string): Promise<string> => {
  // Create a detailed prompt based on book information
  let prompt = `Professional book cover design for "${book.title}" by ${book.author || 'Author Name'}, ${book.genre.toLowerCase()} genre`;
  
  if (book.subGenre) {
    prompt += `, ${book.subGenre.toLowerCase()} style`;
  }
  
  if (book.tone) {
    prompt += `, ${book.tone.toLowerCase()} tone`;
  }
  
  // Add genre-specific visual elements
  const genrePrompts: {[key: string]: string} = {
    'romance': 'elegant typography, soft romantic colors, dreamy atmosphere, hearts or roses elements',
    'fantasy': 'magical elements, mystical colors, dragons or castles, enchanted forest',
    'science fiction': 'futuristic design, space elements, technological themes, metallic colors',
    'mystery': 'dark atmospheric design, shadows, mysterious silhouettes, noir style',
    'thriller': 'bold dramatic design, intense colors, suspenseful elements',
    'historical fiction': 'vintage design, period-appropriate elements, classic typography',
    'contemporary fiction': 'modern clean design, realistic elements, contemporary colors',
    'young adult': 'vibrant colors, youthful design, dynamic typography',
    'non-fiction': 'professional clean design, informative layout, authoritative look',
    'self-help': 'inspiring design, motivational colors, uplifting imagery',
    'business': 'professional corporate design, success imagery, clean typography',
    'biography': 'portrait-style design, documentary feel, respectful presentation'
  };
  
  if (genrePrompts[book.genre.toLowerCase()]) {
    prompt += `, ${genrePrompts[book.genre.toLowerCase()]}`;
  }
  
  prompt += `, high quality, professional book cover design, clean typography with author name "${book.author || 'Author Name'}" clearly visible, marketable design, 4k resolution`;
  
  try {
    const ai = new GoogleGenAI({
      apiKey: geminiApiKey,
    });

    const response = await ai.models.generateImages({
      model: 'models/imagen-4.0-generate-preview-06-06',
      prompt: prompt,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/jpeg',
        aspectRatio: '9:16', // Supported vertical aspect ratio
      },
    });

    if (!response?.generatedImages || response.generatedImages.length === 0) {
      throw new Error('No images generated by Gemini Imagen');
    }

    const imageBytes = response.generatedImages[0]?.image?.imageBytes;
    if (!imageBytes) {
      throw new Error('No image data received from Gemini Imagen');
    }
    
    // Convert base64 image bytes to data URL for browser display
    return `data:image/jpeg;base64,${imageBytes}`;
  } catch (error) {
    console.error('Error generating book cover with Gemini Imagen:', error);
    throw error;
  }
};



export const generateFeaturedImage = async (
  title: string,
  description: string,
  geminiApiKey: string
): Promise<string> => {
  const prompt = `A professional featured image for a blog post titled "${title}". The blog post is about: ${description}. The image should be high quality, engaging, and relevant to the topic. 16:9 aspect ratio.`;

  try {
    const ai = new GoogleGenAI({
      apiKey: geminiApiKey,
    });

    const response = await ai.models.generateImages({
      model: 'models/imagen-4.0-generate-preview-06-06',
      prompt: prompt,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/jpeg',
        aspectRatio: '16:9',
      },
    });

    if (!response?.generatedImages || response.generatedImages.length === 0) {
      throw new Error('No images generated by Gemini Imagen');
    }

    const imageBytes = response.generatedImages[0]?.image?.imageBytes;
    if (!imageBytes) {
      throw new Error('No image data received from Gemini Imagen');
    }
    
    return `data:image/jpeg;base64,${imageBytes}`;
  } catch (error) {
    console.error('Error generating featured image with Gemini Imagen:', error);
    throw error;
  }
};